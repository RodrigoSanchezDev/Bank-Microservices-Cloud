services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: bank-postgres
    environment:
      POSTGRES_DB: bankdb
      POSTGRES_USER: bank
      POSTGRES_PASSWORD: bankpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
      - ./docker/postgres/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bank -d bankdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Config Server
  config-server:
    build: ./config-server
    container_name: bank-config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8888/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  # Eureka Server (Service Discovery)
  eureka-server:
    build: ./eureka-server
    container_name: bank-eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8761/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 90s

  # API Gateway BFF (Backend for Frontend)
  api-gateway-bff:
    build: ./api-gateway-bff
    container_name: bank-api-gateway-bff
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verify-certificate --no-verbose --tries=1 --spider https://localhost:8443/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 120s

  # Account Service (Microservicio de Cuentas)
  account-service:
    build: ./account-service
    container_name: bank-account-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bankdb
      - DB_USER=bank
      - DB_PASSWORD=bankpass123
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 120s

  # Customer Service (Microservicio de Clientes)
  customer-service:
    build: ./customer-service
    container_name: bank-customer-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=customer-service
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=customerdb
      - DB_USER=bank
      - DB_PASSWORD=bankpass123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8082/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 120s

  # Transaction Service (Microservicio de Transacciones)
  transaction-service:
    build: ./transaction-service
    container_name: bank-transaction-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_APPLICATION_NAME=transaction-service
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=transactiondb
      - DB_USER=bank
      - DB_PASSWORD=bankpass123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8083/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 120s

  # Zookeeper (Requerido para Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: bank-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "cub zk-ready localhost:2181 10 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Kafka (Message Broker)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: bank-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "cub kafka-ready -b localhost:9092 1 20 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 40s

  # Kafka UI (Interfaz Web para visualizar mensajes)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: bank-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: bank-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Batch Service (Spring Batch - Procesamiento de archivos CSV legacy)
  batch-service:
    build:
      context: ./batch-service
      dockerfile: Dockerfile
    container_name: bank-batch-service
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    # Puerto 8084 NO expuesto - Solo accesible v√≠a BFF HTTPS (8443)
    # Acceso: https://localhost:8443/api/batch/** (requiere JWT)
    # ports:
    #   - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/batchdb
      SPRING_DATASOURCE_USERNAME: bank
      SPRING_DATASOURCE_PASSWORD: bankpass123
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: "false"
    networks:
      - bank-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8084/actuator/health || exit 1",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

networks:
  bank-network:
    driver: bridge

volumes:
  postgres_data:
